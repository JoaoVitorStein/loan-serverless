
service: loan

provider:
  name: aws
  runtime: python3.8
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    API_KEY: ${opt:api_key}
    BASE_NOVERDE_API_URL: ${opt:base_noverde_api_url}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"  

package:
  individually: true

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: false

functions:
  Create:
    handler: src/handlers/create_loan.create_loan
    package: {}
    events:
      - http:
          path: loan
          method: post
          cors: true
  Get:
    handler: src/handlers/get_loan.get_loan
    package: {}
    events:
      - http:
          path: loan/{id}
          method: get
          cors: true          
  ComputeLoan:
    handler: src/handlers/compute_loan_handler.compute
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - LoanDynamoDBTable
              - StreamArn
          batchSize: 1


resources:
  Resources:
    LoanDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        StreamSpecification:
          StreamViewType: NEW_IMAGE